<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fuerbringer.info feed</title>
    <description>fuerbringer.info: Posts about technology.</description>
    <language>en-us</language>
    <link>https://fuerbringer/rss.xml</link>
    <atom:link href="https://fuerbringer/rss.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A better way to manage shell scripts on NixOS</title>
      <guid>https://fuerbringer/post/better-way-to-manage-scripts-on-nixos.html</guid>
      <pubDate>Sun, 19 May 2019 18:07:00 +0200</pubDate>
      <description><![CDATA[<p>I’ve <a href="/post/managing-shell-scripts-on-nixos.html">previously</a> discussed how to package your own scripts into the NixOS system by using <code>mkDerivation</code>. Since then I’ve discovered a much more convenient way NixOS allows you to package shell scripts. The <a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/build-support/trivial-builders.nix#L58"><code>pkgs.writeScriptBin</code></a> function allows you to easily generate Nix packages in your <code>configuration.nix</code> by passing it the shell script name and text contents:</p>
<pre><code>myscript = pkgs.writeScriptBin &quot;myscript&quot; &#39;&#39;
    #!${pkgs.stdenv.shell}
    echo &quot;Hello, world! This is my shell script.&quot;
  &#39;&#39;;</code></pre>
<p>In this context, <code>myscript</code> will be a package which we can add to our <code>environment.systemPackages</code> like so:</p>
<pre><code>let
  myscript = pkgs.writeScriptBin &quot;myscript&quot; &#39;&#39;
      #!${pkgs.stdenv.shell}
      echo &quot;Hello, world! This is my shell script.&quot;
    &#39;&#39;;
in
{
  # Your usual configuration.nix
  # ...
  environment.systemPackages = with pkgs; [ myscript ];
}</code></pre>
<p>The unofficial NixOS wiki<sup>1</sup> more great examples on this. It does however miss an example on how to package these scripts for multiple machines (configuration.nix files) so no redundancy occurs. For that I created a simple example<sup>2</sup> with the <code>bc-dl</code> script I used in earlier posts:</p>
<pre><code>{ config, pkgs, ... }:

let
  bc-dl = pkgs.writeScriptBin &quot;bc-dl&quot; &#39;&#39;
    #!${pkgs.stdenv.shell}
    # This is a script that spawns a nix shell, installs python stuff with
    # bandcamp-dl and downloads an album into a directory

    nix-shell -p python36Packages.virtualenv bash --run bash &lt;&lt; EOF

    WDIR=&quot;/tmp&quot; # Working directory
    VEDIR=&quot;pip&quot; # Virtualenv directory

    if [ -z &quot;$1&quot; ] || [ -z &quot;$2&quot; ]; then
      echo &quot;Please provide all arguments: 
        bc-dl [https://artist.bandcamp.com/album] [/path/to/dest/folder]&quot;
      exit 1
    fi

    virtualenv /tmp/pip

    source /tmp/pip/bin/activate

    pip install bandcamp-downloader

    # $1: bandcamp link
    # $2: destination
    bandcamp-dl --base-dir $2 $1

    echo &quot;Done.&quot;

    EOF
  &#39;&#39;;
in
{
  config = {
    environment.systemPackages = with pkgs; [ bc-dl ];
  };
}</code></pre>
<p>The above script resides in the same (or deeper) directory as <code>configuration.nix</code> and can simply be imported like this:</p>
<pre><code>imports = [ ./pkgs/bc-dl ];</code></pre>
<p>The advantage of this is that you can import this in many different <code>configuration.nix</code> files without having to embed the script itself and bloating up the machine configuration.</p>
<ol type="1">
<li><a href="https://nixos.wiki/wiki/Nix_Cookbook">NixOS Wiki Cookbook</a></li>
<li><a href="https://github.com/fuerbringer/nixfiles/blob/master/pkgs/bc-dl/default.nix">bc-dl with pkgs.writeScriptBin example</a></li>
</ol>]]></description>
    </item>
    <item>
      <title>Managing shell scripts on NixOS</title>
      <guid>https://fuerbringer/post/managing-shell-scripts-on-nixos.html</guid>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0100</pubDate>
      <description><![CDATA[<p>So you’ve got a bunch of shell scripts laying around to get various small userspace tasks done. On a regular GNU/Linux or unix-like operating system you’d simply chuck the scripts into <code>/usr/bin/</code> or <code>/usr/sbin</code>. The extra fancy variant would be to use GNU stow to have them symlinked from a versioned directory.</p>
<p>On NixOS this would be quite ugly. This fact becomes apparent once one takes a look at the <code>/usr/bin</code> directory on NixOS:</p>
<pre><code>$ ls -l /usr/bin
total 4
lrwxrwxrwx 1 root root 66 Feb 23 10:26 env -&gt;
/nix/store/68z2cvbzws1pn0z8dhgfkmws75r2z7gm-coreutils-8.29/bin/env
</code></pre>
<p>Nope! This is the territory of the Nix system. When you use NixOS, you shall play ball with Nix. Packages on NixOS are defined as so-called <em>derivations</em> on NixOS. They become available once imported into the environments packages. So why not just define our scripts as Nix derivations? This may sound complicated, but it’s not.</p>
<p>I recently wrote a bash script<sup>1</sup> that spawns a virtualenv inside of a Nix shell to download Bandcamp<sup>2</sup> albums. Let’s see how that works as a derivation:</p>
<pre><code>with import &lt;nixpkgs&gt; {};

stdenv.mkDerivation rec {
  name = &quot;bc-dl&quot;;
  version = &quot;1.0.0&quot;;

  buildInputs = [ makeWrapper ];

  unpackPhase = &quot;true&quot;;

  installPhase = &#39;&#39;
    mkdir -p $out/bin
    cp ${./bc-dl} $out/bin/${name}
    for f in $out/bin/*; do
      wrapProgram $f
        --prefix PATH : ${stdenv.lib.makeBinPath [ coreutils ]}
    done
  &#39;&#39;;

}</code></pre>
<p>This <code>default.nix</code> file simply takes <code>bc-dl</code>, the shell script, and tells NixOS to put it in its long hash-like directories you’re used to. This involves patching the shebang and bringing packages into scope, like <code>coreutils</code>.</p>
<p>To actually get this installed the derivation has to have the script present and be in a reasonable place where your <code>/etc/nixos/configuration.nix</code> has access to it. In your <code>environment.systemPackages</code> define the folder where your <code>default.nix</code> resides:</p>
<pre><code>environment.systemPackages = [
  (import ./pkgs/bc-dl)
  # Other packages
  # ...
];</code></pre>
<p>After a <code>nixos-rebuild switch</code> your script should be available like it would be from <code>/usr/bin</code> or similar. A full example can be found in my <a href="https://github.com/fuerbringer/nixfiles/tree/master/pkgs/bc-dl">nixfiles</a>.</p>
<h3 id="footnotes">Footnotes</h3>
<ol type="1">
<li><a href="https://github.com/fuerbringer/nixfiles/blob/master/pkgs/bc-dl/bc-dl">bc-dl</a></li>
<li>Bandcamp is great and I do buy albums there. Support <a href="https://www.defectivebydesign.org/">drm-free</a> music!</li>
</ol>]]></description>
    </item>
    <item>
      <title>Writing NixOS modules</title>
      <guid>https://fuerbringer/post/writing-nixos-modules.html</guid>
      <pubDate>Sun, 29 Jul 2018 00:00:00 +0200</pubDate>
      <description><![CDATA[<h2 id="what-is-nix-and-nixos">What is Nix and NixOS?</h2>
<p>Nix is an excellent declarative package manager which really shines as it appears in NixOS. An operating system which lets you fully declare what your system should look like and builds it according to that. Using its functional dedicated scripting language (DSL) Nix allows for a text based, modular and near infinite amount of possible operating system configurations. Webservers hosting hundreds of vhosts, Tor nodes, desktop workstations, <em>riced</em> i3wm ThinkPad setups, NixOS does not get in the way. In fact, I’m using NixOS for exactly that. A desktop and laptop configuration all in one. It’s available <a href="https://github.com/fuerbringer/nixfiles">here</a>.</p>
<p><em>Note: This post does not describe how to write packages / derivations for Nix.</em></p>
<h2 id="modularity">Modularity</h2>
<p>Imagine you could have the exact same setup across all of your machines with configurable aspects depending on whether the machine is mobile or not. Well, it’s probably not hard to imagine, you just have to do it. But doing so might be rather annoying if done manually, or simply a waste of time. Some might immidiately suggest Ansible, and while that would work, I’d argue it’s not the best solution for this particular usecase. Let us now have a look at how elagantly NixOS solves this problem.</p>
<h3 id="configuration.nix">configuration.nix</h3>
<p>Each machine has a <em>configuration.nix</em> file. It defines the computer’s state. It might have something like this in it:</p>
<pre><code>services = {
  xserver = {
    enable = true;
    # &lt;desktop manager configuration maybe?&gt;
    windowManager = {
      i3 = {
        enable = true;

      };
      default = &quot;i3&quot;;

    };

  };

  compton = {
    enable = true;
  };
};</code></pre>
<p>That Nix configuration gets us halfway to a ready to use i3wm desktop. It could almost be <em>git pull</em>ed to multiple machines and built! But what do you do if you don’t want Compton with fancy effects running on your battery powered laptop? What we’d need is some kind of way to pack the above code into a module, a function if you will, and tell it, as a parameter, whether to be in mobile mode or not.</p>
<h3 id="small-module-example">Small module example</h3>
<p>Let us now take a look at a small NixOS module.</p>
<pre><code>{ config, lib, pkgs, ... }:

with lib; 

let
cfg = config.services.myModule;
in {
  options.services = {
    myModule = {
      isMobile = mkOption {
        default = false;
        type = with types; nullOr bool;
        description = &quot;Whether the computer is a mobile device.&quot;;

      };

    };

  };

  config = {
    services = {
      xserver = {
        enable = true;
        layout = &quot;us&quot;;

        # Use LightDM as display manager
        displayManager.lightdm.enable = true;

        # Enable on mobile for touchpads, etc.
        libinput.enable = cfg.isMobile;

        # Use i3wm with a custom config
        windowManager = {
          i3.enable = true;
          default = &quot;i3&quot;;

        };

      };

      compton = {
        enable = !cfg.isMobile;
        extraOptions = &#39;&#39;
          # Fancy expensive effects here!
        &#39;&#39;;

      };

    };

  };

}</code></pre>
<p>Think of it as a function we can import and call in our <em>configuration.nix</em> and define whether we want mobile mode (<em>options.services.myModule.isMobile</em>) to be enabled. Assuming the above module is saved as <em>myModule.nix</em> it can be imported into a <em>configuration.nix</em> like so:</p>
<pre><code>{ config, pkgs, ...   }:
{
  imports = [
    ./myModule.nix
  ];

  services.myModule.isMobile = true;
  # Rest of configuration.nix

}</code></pre>
<p>And that’s it! Another <em>configuration.nix</em> for your desktop computer with <em>isMobile</em> set to <em>false</em> would disable Compton accordingly. As already mentioned, this allows for near infinite flexibility. With a bit more Nix language knowledge you could go on to dynamically generating differing <em>/etc</em> configuration files depending on the module parameters.</p>
<p>If you need a complete example for this use case take a look at my <a href="https://github.com/fuerbringer/nixfiles">nixfiles</a>!</p>
<h2 id="further-reading">Further reading</h2>
<ol type="1">
<li><a href="https://nixos.org/nixos/manual/index.html#sec-writing-modules">NixOS Manual, “Chapter 34. Writing NixOS Modules”</a></li>
<li><a href="https://nixos.org/nixos/nix-pills/basics-of-language.html">Nix Pills, “Chapter 4. The Basics of the Language”</a></li>
</ol>]]></description>
    </item>
  </channel>
</rss>
